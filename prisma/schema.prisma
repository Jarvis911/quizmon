// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  username      String  @unique
  password      String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  quizzes       Quiz[]
  quizRatings   QuizRating[]
  matchs        Match[]
  matchResults  MatchResult[]
}

model QuizCategory {
  id            Int     @id @default(autoincrement())
  name          String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  quizzes       Quiz[]
}

model Quiz {
  id            Int     @id @default(autoincrement())
  title         String
  description   String
  image         String?
  isPublic      Boolean @default(false)

  creatorId     Int
  creator       User    @relation(fields: [creatorId], references: [id])
  categoryId    Int
  category      QuizCategory  @relation(fields: [categoryId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  questions     Question[]
  quizRatings   QuizRating[]
  matchs        Match[]
}

model QuizRating {
  id            Int     @id @default(autoincrement())
  rating        Int
  text          String

  userId        Int
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId        Int
  quiz          Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

enum MediaType {
  IMAGE
  VIDEO
}

model QuestionMedia {
  id            Int         @id() @default(autoincrement())
  type          MediaType
  url           String
  startTime     Int?
  duration      Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  questionId    Int
  question      Question?    @relation(fields: [questionId], references: [id])
}

enum QuestionType {
  BUTTONS
  CHECKBOXES
  RANGE
  REORDER
  TYPEANSWER
  LOCATION 
}

model Question {
  id            Int     @id @default(autoincrement())
  text          String
  type          QuestionType

  button        QuestionButton?
  checkbox      QuestionCheckbox?
  reorder       QuestionReorder?
  range         QuestionRange?
  typeAnswer    QuestionTypeAnswer?
  location      QuestionLocation?

  quizId        Int
  quiz          Quiz    @relation(fields: [quizId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  options       QuestionOption[]
  media         QuestionMedia[]
}

model QuestionButton {
  id            Int         @id 
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionCheckbox {
  id            Int         @id
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionOption {
  id            Int         @id @default(autoincrement())
  text          String
  isCorrect     Boolean?    @default(false)    // Button, Checkbox
  order         Int?                           // Reorder

  questionId    Int
  question      Question    @relation(fields: [questionId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([questionId])
}

model QuestionReorder {
  id            Int         @id
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionRange   {
  id            Int         @id
  minValue      Int
  maxValue      Int
  correctValue  Int       
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionTypeAnswer {
  id            Int         @id
  correctAnswer String
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionLocation    {
  id                Int         @id
  correctLatitude   Float
  correctLongitude  Float
  question          Question    @relation(fields: [id], references: [id])
}

model Match {
  id              Int         @id @default(autoincrement())
  startTime       DateTime?
  endTime         DateTime?

  quizId          Int
  quiz            Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  hostId          Int
  host            User        @relation(fields: [hostId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  matchResults    MatchResult[] 
}

model MatchResult {
  id              Int         @id @default(autoincrement())
  score           Int?

  userId          Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchId         Int
  match         Match         @relation(fields: [matchId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}