// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  username      String  @unique
  password      String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  quizzes       Quiz[]
}

model Quiz {
  id            Int     @id @default(autoincrement())
  title         String
  description   String
  isPublic      Boolean @default(false)

  creatorId     Int
  creator       User    @relation(fields: [creatorId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  questions     Question[]
  media         QuizMedia[]
}

enum MediaType {
  IMAGE
  VIDEO
}

model QuizMedia {
  id            Int         @id() @default(autoincrement())
  type          MediaType
  url           String
  startTime     Int?
  duration      Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  quizId    Int
  quiz      Quiz    @relation(fields: [quizId], references: [id])
}

enum QuestionType {
  BUTTONS
  CHECKBOXES
  RANGE
  REORDER
}

model Question {
  id            Int     @id @default(autoincrement())
  text          String
  type          QuestionType

  button        QuestionButton?
  checkbox      QuestionCheckbox?
  reorder       QuestionReorder?
  range         QuestionRange?

  quizId        Int
  quiz          Quiz    @relation(fields: [quizId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  options       QuestionOption[]
}

model QuestionButton {
  id            Int         @id 
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionCheckbox {
  id            Int         @id
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionOption {
  id            Int         @id @default(autoincrement())
  text          String
  isCorrect     Boolean?    @default(false)    // Button, Checkbox
  order         Int?                           // Reorder

  questionId    Int
  question      Question    @relation(fields: [questionId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([questionId])
}

model QuestionReorder {
  id            Int         @id
  question      Question    @relation(fields: [id], references: [id])
}

model QuestionRange   {
  id            Int         @id
  minValue      Int
  maxValue      Int
  correctValue  Int       
  question      Question    @relation(fields: [id], references: [id])
}

